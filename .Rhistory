# tabela de atributos
sf::st_drop_geometry(rc)
# mapa
ggplot() +
geom_sf(data = rc, aes(fill = CLASSE_USO), color = NA) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
coord_sf() +
labs(x = "Longitude", y = "Latitude", fill = "Classes") +
annotation_scale(location = "br", width_hint = .3) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0, "cm"), pad_y = unit(.8, "cm"),
style = north_arrow_fancy_orienteering) +
theme_bw() +
theme(legend.position = c(.2, .2),
legend.background = element_rect(colour = "black"))
# criar uma coluna numerica para as classes de uso da terra
rc <- rc %>%
dplyr::mutate(classe_num = seq(5))
# tabela de atributos
sf::st_drop_geometry(rc)
# rasterizar --------------------------------------------------------------
# criar um raster vazio
ra <- fasterize::raster(rc, res = 30)
ra
# rasterizar
rc_raster <- fasterize::fasterize(sf = rc, raster = ra, field = "classe_num")
rc_raster
# mapa fasterize
fasterize::plot(rc_raster)
# mapa landscapetools
landscapetools::show_landscape(rc_raster, discrete = TRUE) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
theme(legend.position = "none")
# mapa
ggplot() +
geom_sf(data = rc, aes(fill = CLASSE_USO), color = NA) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
coord_sf() +
labs(x = "Longitude", y = "Latitude", fill = "Classes") +
annotation_scale(location = "br", width_hint = .3) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0, "cm"), pad_y = unit(.8, "cm"),
style = north_arrow_fancy_orienteering) +
theme_bw() +
theme(legend.position = c(.2, .2),
legend.background = element_rect(colour = "black"))
ggsave("./mapas/00_uso_vetor.png", he = 15, wi = 20, un = "cm", dpi = 300)
# mapa landscapetools
landscapetools::show_landscape(rc_raster, discrete = TRUE) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
theme(legend.position = "none")
ggsave("./mapas/01_uso_raster_landscapemetrics.png", he = 15, wi = 20, un = "cm", dpi = 300)
# mapa ggplot2
ggplot() +
geom_raster(data = raster::rasterToPoints(rc_raster) %>% tibble::as_tibble(),
aes(x, y, fill = factor(layer))) +
coord_sf() +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
labs(x = "Longitude", y = "Latitude", fill = "Classes") +
theme_bw() +
theme(legend.position = c(.2, .2),
axis.text.y = element_text(angle = 90, hjust = .5))
ggsave("./mapas/02_uso_raster_ggplot2.png", he = 15, wi = 20, un = "cm", dpi = 300)
# mapa tmap
tm_shape(rc_raster, bbox = raster::bbox(rc_raster) + c(-1e3, -1e3, 1e3, 1e3)) +
tm_raster(style = "cat", palette = c("blue", "orange", "gray", "forestgreen", "green"),
title = "Classes") +
tm_grid(lines = FALSE, labels.rot = c(0, 90), labels.size = .8) +
tm_compass(position = c(.73, .08)) +
tm_scale_bar(position = c(.63, 0), text.size = .65) +
tm_layout(legend.position = c("left", "bottom"))
tmap::tmap_save(filename = "./mapas/03_uso_raster_tmap.png", he = 15, wi = 20, un = "cm", dpi = 300)
# exportar raster
raster::writeRaster(x = rc_raster,
filename = "./raster/SP_3543907_USO_raster_30m",
format = "GTiff",
options = c("COMPRESS=DEFLATE" , "TFW=TRUE"),
overwrite = TRUE)
# buffers -----------------------------------------------------------------
# coordenadas - amostragens de campo
co <- tibble::tibble(id = 1:10,
x = c(222993, 229276, 242815, 231477, 231477,
241702, 237779, 239468, 236614, 230836),
y = c(7526113, 7517654, 7528139, 7507708, 7512711,
7535264, 7532688, 7520459, 7527841, 7524274))
co
crs(rc)
po
# pontos
po <- sf::st_as_sf(x = co, coords = c("x", "y"), crs = raster::crs(rc))
po
# buffers
bu_2km <- sf::st_buffer(x = po, dist = 2000)
bu_2km
# mapa
tm_shape(rc_raster, bbox = raster::bbox(rc_raster) + c(-1e3, -1e3, 1e3, 1e3)) +
tm_raster(style = "cat", palette = c("blue", "orange", "gray", "forestgreen", "green"),
title = "Classes") +
tm_shape(bu_2km) +
tm_borders(col = "red", lwd = 2) +
tm_shape(po) +
tm_dots(size = .7, shape = 20, alpha = .7) +
tm_grid(lines = FALSE, labels.rot = c(0, 90), labels.size = .8) +
tm_compass(position = c(.73, .08)) +
tm_scale_bar(position = c(.63, 0), text.size = .65) +
tm_layout(legend.position = c("left", "bottom"))
tmap::tmap_save(filename = "./mapas/04_pontos_buffer_uso_raster_tmap.png", he = 15, wi = 20, un = "cm", dpi = 300)
# exportar
sf::write_sf(po, "./vector/pontos_amostragem.shp")
sf::write_sf(bu_2km, "./vector/buffer_2km.shp")
# ajustar paisagens -------------------------------------------------------
# list
rc_raster_pai <- list()
rc_raster_pai
# crop e mask das paisagens
for(i in 1:10){}
# informacao
print(paste0("Ajustando a paisagem ", i))
# filter
bu_2km_pa <- bu_2km %>%
dplyr::filter(id == i)
bu_2km_pa
# crop e mask das paisagens
for(i in 1:10){
# informacao
print(paste0("Ajustando a paisagem ", i))
# filter
bu_2km_pa <- bu_2km %>%
dplyr::filter(id == i)
# crop e mask
rc_raster_pai[[i]] <- rc_raster %>%
raster::crop(bu_2km_pa) %>%
raster::mask(bu_2km_pa)
}
# nomes das paisagens
rc_raster_pai
names(rc_raster_pai)
c(paste0("paisagem_0", 1:9), "paisagem_10")
names(rc_raster_pai) <- c(paste0("paisagem_0", 1:9), "paisagem_10")
names(rc_raster_pai)
# mapas
la01 <- landscapetools::show_landscape(rc_raster_pai$paisagem_01, discrete = TRUE) +
scale_fill_manual(values = c("blue", "orange", "forestgreen")) +
labs(title = "Paisagem 01") +
theme(legend.position = "none",
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7, angle = 90, hjust = .5))
la01
la02 <- landscapetools::show_landscape(rc_raster_pai$paisagem_02, discrete = TRUE)+
scale_fill_manual(values = c("blue", "orange", "forestgreen")) +
labs(title = "Paisagem 02") +
theme(legend.position = "none",
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7, angle = 90, hjust = .5))
la02
la03 <- landscapetools::show_landscape(rc_raster_pai$paisagem_03, discrete = TRUE)+
scale_fill_manual(values = c("blue", "orange", "forestgreen")) +
labs(title = "Paisagem 03") +
theme(legend.position = "none",
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7, angle = 90, hjust = .5))
la03
la04 <- landscapetools::show_landscape(rc_raster_pai$paisagem_04, discrete = TRUE)+
scale_fill_manual(values = c("blue", "orange", "forestgreen")) +
labs(title = "Paisagem 04") +
theme(legend.position = "none",
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7, angle = 90, hjust = .5))
la04
la01 + la02 + la03 + la04
ggsave("./mapas/05_uso_paisagens.png", he = 15, wi = 20, un = "cm", dpi = 300)
# exportar
for(i in 1:10){
# informacao
print(paste0("Exportanto a ", names(rc_raster_pai)[i]))
# exportar
raster::writeRaster(x = rc_raster_pai[[i]],
filename = paste0("./raster/", names(rc_raster_pai)[i]),
format = "GTiff",
options = c("COMPRESS=DEFLATE" , "TFW=TRUE"),
overwrite = TRUE)
}
# checar os raster --------------------------------------------------------
landscapemetrics::check_landscape(rc_raster_pai)
# listar as metricas ------------------------------------------------------
# metricas
all_metrics <- landscapemetrics::list_lsm()
all_metrics
# patch metrics
patch_metrics <- landscapemetrics::list_lsm() %>%
dplyr::filter(level == "patch") %>%
dplyr::arrange(type)
patch_metrics
patch_metrics %>%
group_by(type) %>%
summarise(n = n())
# class metrics
class_metrics <- landscapemetrics::list_lsm() %>%
dplyr::filter(level == "class") %>%
dplyr::arrange(type)
class_metrics
class_metrics_type <- class_metrics %>%
group_by(type) %>%
summarise(n = n())
class_metrics_type
class_metrics_type_unique <- class_metrics %>%
distinct(name, .keep_all = TRUE) %>%
group_by(type) %>%
summarise(n_unicas = n())
class_metrics_type_unique
bind_cols(class_metrics_type, class_metrics_type_unique[, 2]) %>%
mutate(n_agregacao = n - n_unicas)
bind_cols(class_metrics_type, class_metrics_type_unique[, 2]) %>%
mutate(n_agregacao = n - n_unicas)
# landscape metrics
landscape_metrics <- landscapemetrics::list_lsm() %>%
dplyr::filter(level == "landscape") %>%
dplyr::arrange(type)
landscape_metrics
landscape_metrics_type <- landscape_metrics %>%
group_by(type) %>%
summarise(n = n())
landscape_metrics_type$n %>% sum
landscape_metrics_type
landscape_metrics_type_unique <- landscape_metrics %>%
distinct(name, .keep_all = TRUE) %>%
group_by(type) %>%
summarise(n_unicas = n())
landscape_metrics_type_unique
bind_cols(landscape_metrics_type, landscape_metrics_type_unique[, 2]) %>%
mutate(n_agregacao = n - n_unicas)
# exportar
readr::write_csv(all_metrics, "./metricas_lista/listagem_metricas.csv")
# area in patch level
area_p <- landscapemetrics::lsm_p_area(landscape = rc_raster_pai)
area_p
?lsm_p_area
# area in class level
area_c <- landscapemetrics::lsm_c_ca(landscape = rc_raster_pai)
area_c
# area in patch level
area_l <- landscapemetrics::lsm_l_ta(landscape = rc_raster_pai)
area_l
# patch level
lsm_patch <- landscapemetrics::calculate_lsm(landscape = rc_raster_pai,
level = "patch",
edge_depth = 1, # celulas
neighbourhood = 8, # oito celulas nas vizinhancas
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_patch
# class level
lsm_class <- landscapemetrics::calculate_lsm(landscape = rc_raster_pai,
level = "class",
edge_depth = 1, # celulas
neighbourhood = 8, # oito celulas nas vizinhancas
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_class
# landscape level
lsm_landscape <- landscapemetrics::calculate_lsm(landscape = rc_raster_pai,
level = "landscape",
edge_depth = 1, # celulas
neighbourhood = 8, # oito celulas nas vizinhancas
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
# landscape level
lsm_landscape <- landscapemetrics::calculate_lsm(landscape = rc_raster_pai,
level = c("patch", "landscape"),
edge_depth = 1, # celulas
neighbourhood = 8, # oito celulas nas vizinhancas
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_landscape
# export
readr::write_csv(lsm_patch, "./metricas_tabelas/metricas_patch.csv")
readr::write_csv(lsm_class, "./metricas_tabelas/metricas_class.csv")
readr::write_csv(lsm_landscape, "./metricas_tabelas/metricas_landscape.csv")
# area in patch level
area_p <- landscapemetrics::lsm_p_area(landscape = rc_raster_pai[])
area_p
rc_raster_pai[]
# mapas -------------------------------------------------------------------
# plotar paisagem e metricas
landscapemetrics::show_patches(landscape = rc_raster_pai$paisagem_01,
class = 4, labels = FALSE)
landscapemetrics::show_cores(rc_raster_pai$paisagem_01, class = 4,
edge_depth = 1, labels = FALSE)
landscapemetrics::show_cores(rc_raster_pai$paisagem_01, class = 4,
edge_depth = 2, labels = FALSE)
landscapemetrics::show_lsm(rc_raster_pai$paisagem_01, what = "lsm_p_area", class = 4,
labels = FALSE)
# espacializar os valores das metricas ------------------------------------
# reclassificar
rc_raster_pai01_fo <- raster::reclassify(x = rc_raster_pai$paisagem_01,
rcl = c(0,3,NA, 3,4,1))
landscapetools::show_landscape(rc_raster_pai01_fo)
# calcular e espacializar
rc_raster_pai01_fo_patch <- landscapemetrics::spatialize_lsm(rc_raster_pai01_fo,
what = "patch",
progress = TRUE)
rc_raster_pai01_fo_patch
# mapa
landscapetools::show_landscape(rc_raster_pai01_fo_patch[[1]]$lsm_p_area) +
labs(title = "Área")
rc_raster_pai01_fo_patch
# exportar
for(i in 1:length(rc_raster_pai01_fo_patch[[1]])){
# informacao
print(paste0("Paisagem 01 - ", names(rc_raster_pai01_fo_patch[[1]][i])))
# exportar
raster::writeRaster(x = rc_raster_pai01_fo_patch[[1]][[i]],
filename = paste0("./metricas_raster/paisagem_01_", names(rc_raster_pai01_fo_patch[[1]][i])),
format = "GTiff",
options = c("COMPRESS=DEFLATE" , "TFW=TRUE"),
overwrite = TRUE)
}
# exemplo -----------------------------------------------------------------
# paisagens com floresta e água
# list
rc_raster_pai_flo_agu_sep <- list()
rc_raster_pai_flo_agu_sep
rc_raster_pai_flo_agu_jun <- list()
rc_raster_pai_flo_agu_jun
# reclassificar as paisagens das paisagens
for(i in 1:10){
# informacao
print(paste0("Ajustando a paisagem ", i))
# reclassify
rc_raster_pai_flo_agu_sep[[i]] <- raster::reclassify(x = rc_raster_pai[[i]],
rcl = c(0,1,1, 1,2,NA, 2,3,NA, 3,4,4, 4,5,NA))
# reclassify
rc_raster_pai_flo_agu_jun[[i]] <- raster::reclassify(x = rc_raster_pai[[i]],
rcl = c(0,1,1, 1,2,NA, 2,3,NA, 3,4,1, 4,5,NA))
}
# verificar
landscapetools::show_landscape(rc_raster_pai_flo_agu_sep[[1]])
landscapetools::show_landscape(rc_raster_pai_flo_agu_jun[[1]])
# metrica para tamanho e densidade de borda das lagoas
borda_lagoas <- landscapemetrics::calculate_lsm(landscape = rc_raster_pai_flo_agu_sep,
what = "lsm_c_ed",
edge_depth = 1) %>%
dplyr::filter(class == 1)
borda_lagoas
# metrica para tamanho de floresta
area_floresta <- landscapemetrics::calculate_lsm(landscape = rc_raster_pai_flo_agu_sep,
what = "lsm_c_ca") %>%
dplyr::filter(class == 4)
area_floresta
# distancia de lagos e florestas
dist_floresta_lago <- landscapemetrics::calculate_lsm(landscape = rc_raster_pai_flo_agu_jun,
what = c("lsm_l_enn_mn"))
dist_floresta_lago
# numero de especies por paisagem
sp_n <- c(5, 3, 6, 8, 5, 2, 0, 9, 4, 2)
sp_n
# data
da <- tibble::tibble(sp_n = sp_n,
borda_lagoa = borda_lagoas$value,
area_floresta = area_floresta$value,
dist_floresta_lago = dist_floresta_lago$value)
da
# modelos
mo_borda_lagoas <- glm(sp_n ~ borda_lagoa, data = da, family = "poisson")
broom::tidy(mo_borda_lagoas)
mo_area_floresta <- glm(sp_n ~ log10(area_floresta), data = da, family = "poisson")
broom::tidy(mo_area_floresta)
mo_dist_floresta_lago <- glm(sp_n ~ dist_floresta_lago, data = da, family = "poisson")
broom::tidy(mo_dist_floresta_lago)
# aicc
aic <- bbmle::ICtab(mo_borda_lagoas, mo_area_floresta, mo_dist_floresta_lago,
type = "AICc",
weights = TRUE,
delta = TRUE,
logLik = TRUE,
sort = TRUE,
nobs = nrow(da))
aic
class(aic) <- "data.frame"
aic
write.csv(aic, "./modelos/aic_results.csv")
# graficos
ggplot(data = da) +
aes(x = borda_lagoa, y = sp_n) +
stat_smooth(method = "glm", method.args = list(family = "poisson"), col = "black", level = .95) +
geom_point(shape = 21, size = 5, col = "black", fill = "blue", alpha = .8) +
theme_classic() +
labs(x = "Densidade de borda de lagoas", y = "Número de espécies") +
theme(axis.title = element_text(size = 24),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
ggsave("./modelos/modelo_borda_lagoa.png", he = 15, wi = 20, un = "cm", dpi = 300)
# graficos
ggplot(data = da) +
aes(x = log10(area_floresta), y = sp_n) +
stat_smooth(method = "glm", method.args = list(family = "poisson"), col = "black", level = .95) +
geom_point(shape = 21, size = 5, col = "black", fill = "forestgreen", alpha = .8) +
theme_classic() +
labs(x = "Área de floresta (log10)", y = "Número de espécies") +
theme(axis.title = element_text(size = 24),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
ggsave("./modelos/modelo_area_flo.png", he = 15, wi = 20, un = "cm", dpi = 300)
# graficos
ggplot(data = da) +
aes(x = dist_floresta_lago, y = sp_n) +
stat_smooth(method = "glm", method.args = list(family = "poisson"), col = "black", level = .95) +
geom_point(shape = 21, size = 5, col = "black", fill = "cyan4", alpha = .8) +
theme_classic() +
labs(x = "Distância de lagoas e florestas", y = "Número de espécies") +
theme(axis.title = element_text(size = 24),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
ggsave("./modelos/modelo_dist_flo_agu.png", he = 15, wi = 20, un = "cm", dpi = 300)
library(vega)
library(vegan)
citation("vegan")
library(dismo)
library(randomForest)
library(e1071)
library(rgdal)
library(raster)
library(tidyverse)
citation("vegan")
citation("dismo")
citation("randomForest")
citation("e1071")
citation("rgdal")
citation("tidyverse")
citation("raster")
citation("ggplot2")
citation("tidyverse")
# preparar o r  -----------------------------------------------------------
# memoria
rm(list = ls())
# carregar pacotes
library(sf)
library(raster)
library(rgdal)
library(fasterize)
library(landscapetools)
library(landscapemetrics)
library(tmap)
library(ggspatial)
library(patchwork)
library(broom)
library(bbmle)
library(tidyverse)
# diretorios --------------------------------------------------------------
# conferir diretorio
getwd()
dir()
# mudar diretorio
setwd("02_dados")
# criar diretorios de saida
dir.create("mapas")
dir.create("metricas_lista")
dir.create("metricas_raster")
dir.create("metricas_tabelas")
dir.create("modelos")
dir.create("raster")
dir.create("vector")
# importar dados ----------------------------------------------------------
# download: http://geo.fbds.org.br/SP/RIO_CLARO na pasta 02_dados/vector
# import vector
rc <- sf::read_sf("./vector/SP_3543907_USO.shp")
# tabela de atributos
sf::st_drop_geometry(rc)
# mapa
ggplot() +
geom_sf(data = rc, aes(fill = CLASSE_USO), color = NA) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
coord_sf() +
labs(x = "Longitude", y = "Latitude", fill = "Classes") +
annotation_scale(location = "br", width_hint = .3) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0, "cm"), pad_y = unit(.8, "cm"),
style = north_arrow_fancy_orienteering) +
theme_bw() +
theme(legend.position = c(.2, .2),
legend.background = element_rect(colour = "black"))
ggsave("./mapas/00_uso_vetor.png", he = 15, wi = 20, un = "cm", dpi = 300)
# criar uma coluna numerica para as classes de uso da terra
rc <- rc %>%
dplyr::mutate(classe_num = seq(5))
# tabela de atributos
sf::st_drop_geometry(rc)
# rasterizar --------------------------------------------------------------
# criar um raster vazio
ra <- fasterize::raster(rc, res = 30)
ra
# rasterizar
rc_raster <- fasterize::fasterize(sf = rc, raster = ra, field = "classe_num")
rc_raster
raster::crs(rc_raster) <- raster::crs(rc)
rc_raster
# mapa fasterize
fasterize::plot(rc_raster)
# mapa landscapetools
landscapetools::show_landscape(rc_raster, discrete = TRUE) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
theme(legend.position = "none")
