if(!require("svglite")) install.packages("svglite")
if(!require("mapview")) install.packages("mapview")
if(!require("tmap")) install.packages("tmap")
if(!require("leaflet")) install.packages("leaflet")
if(!require("cartography")) install.packages("cartography")
if(!require("RStoolbox")) install.packages("RStoolbox")
if(!require("whitebox")) devtools::install_github("giswqs/whiteboxR")
if(!require("fasterize")) install.packages("fasterize")
if(!require("leaflet")) install.packages("leaflet")
# species distribution modeling -----------------------------------------------
if(!require("adehabitatHS")) install.packages("adehabitatHS")
if(!require("ape")) install.packages("ape")
if(!require("biomod2")) install.packages("biomod2")
if(!require("boot")) install.packages("boot")
if(!require("classInt")) install.packages("classInt")
if(!require("spDataLarge")) install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source")
if(!require("cowplot")) install.packages("cowplot")
if(!require("Daim")) install.packages("Daim")
if(!require("dismo")) install.packages("dismo")
if(!require("earth")) install.packages("earth")
if(!require("ecospat")) install.packages("ecospat")
if(!require("fields")) install.packages("fields")
if(!require("gam")) install.packages("gam")
if(!require("gbm")) install.packages("gbm")
if(!require("gridExtra")) install.packages("gridExtra")
if(!require("Hmisc")) install.packages("Hmisc")
if(!require("landsat")) install.packages("landsat")
if(!require("ltm")) install.packages("ltm")
if(!require("MASS")) install.packages("MASS")
if(!require("mda")) install.packages("mda")
if(!require("mgcv")) install.packages("mgcv")
if(!require("ncf")) install.packages("ncf")
if(!require("nnet")) install.packages("nnet")
if(!require("PresenceAbsence")) install.packages("PresenceAbsence")
if(!require("pROC")) install.packages("pROC")
if(!require("randomForest")) install.packages("randomForest")
if(!require("rasterVis")) install.packages("rasterVis")
if(!require("reshape2")) install.packages("reshape2")
if(!require("rJava")) install.packages("rJava") # sudo apt install r-cran-rjava
if(!require("rpart")) install.packages("rpart")
if(!require("sdm")) install.packages("sdm")
if(!require("sdm")) install.packages("sdmpredictors")
if(!require("snowfall")) install.packages("snowfall")
if(!require("spocc")) install.packages("spocc")
if(!require("usdm")) install.packages("usdm")
# shiny -------------------------------------------------------------------
if(!require("shiny")) install.packages("shiny")
if(!require("shinyjs")) install.packages("shinyjs")
if(!require("shinydashboard")) install.packages("shinydashboard")
if(!require("DT")) install.packages("DT")
# markdown ----------------------------------------------------------------
if(!require("rmarkdown")) remotes::install_github("rstudio/rmarkdown")
if(!require("tinytex")) install.packages("tinytex"); tinytex::install_tinytex()
if(!require("blogdown")) remotes::install_github("rstudio/blogdown")
if(!require("pagedown")) remotes::install_github("rstudio/pagedown")
if(!require("bookdown")) devtools::install_github("rstudio/bookdown")
if(!require("blogdown")) remotes::install_github("rstudio/blogdown")
if(!require("pagedown")) remotes::install_github("rstudio/pagedown")
if(!require("bookdown")) devtools::install_github("rstudio/bookdown")
if(!require("posterdown")) devtools::install_github("Shedimus/posterdown")
if(!require("xaringan")) remotes::install_github("yihui/xaringan")
if(!require("xaringanthemer")) devtools::install_github("gadenbuie/xaringanthemer")
if(!require("icon")) devtools::install_github("ropenscilabs/icon")
# email -------------------------------------------------------------------
if(!require("gmailr")) install.packages("gmailr")
# beep --------------------------------------------------------------------
if(!require("beepr")) install.packages("beepr")
library(rJava)
# preparate r -------------------------------------------------------------
# memory
rm(list = ls())
# packages
library(fasterize)
library(landscapemetrics)
library(landscapetools)
library(raster)
library(rgdal)
library(sf)
library(tidyverse)
# directory
setwd("./")
getwd()
dir()
# directory
setwd("../")
getwd()
dir()
# directory
setwd("./")
getwd()
dir()
# preparate r -------------------------------------------------------------
# memory
rm(list = ls())
# packages
library(fasterize)
library(landscapemetrics)
library(landscapetools)
library(raster)
library(rgdal)
library(sf)
library(tidyverse)
# directory
setwd("./")
getwd()
dir()
# directory
path <- "/home/mude/data/gitlab/landscapemetrics"
# directory
path <- "/home/mude/data/gitlab/landscapemetrics"
setwd(path)
getwd()
dir()
setwd("./")
getwd()
dir()
# import data -------------------------------------------------------------
# import
rc <- sf::read_sf("./02_dados/vector/rio_claro/SP_3543907_USO.shp")
ggplot() +
geom_sf(data = rc, aes(fill = CLASSE_USO), color = NA) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
labs(x = "Longitude", y = "Latitude", fill = "Classes") +
theme_bw()
# create number coloumn
rc <- rc %>%
dplyr::mutate(class = seq(5))
sf::st_drop_geometry(rc)
# rasterize ---------------------------------------------------------------
# create raster
ra <- fasterize::raster(rc, res = 30)
ra
# rasterize
rc_raster <- fasterize::fasterize(sf = rc, raster = ra, field = "class")
rc_raster
# plot
fasterize::plot(rc_raster)
# ggplot
ggplot() +
geom_raster(data = raster::rasterToPoints(rc_raster) %>% tibble::as_tibble(),
aes(x, y, fill = factor(layer))) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
labs(x = "Longitude", y = "Latitude", fill = "Classes") +
theme_bw()
# landscapetools
landscapetools::show_landscape(rc_raster, discrete = TRUE)
# buffers -----------------------------------------------------------------
po <- sf::read_sf("./dados/vector/rio_claro/pontos_amostragem.shp")
# buffers -----------------------------------------------------------------
po <- sf::read_sf("./02_dados/vector/rio_claro/pontos_amostragem.shp")
po
bu <- sf::st_buffer(po, 2000)
bu
# ggplot
ggplot() +
geom_raster(data = raster::rasterToPoints(rc_raster) %>% tibble::as_tibble(),
aes(x, y, fill = factor(layer))) +
geom_sf(data = bu, fill = NA, color = "black", size = 1) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
labs(x = "Longitude", y = "Latitude", fill = "Classes") +
theme_bw()
landscapetools::show_landscape(rc_raster, discrete = TRUE) +
geom_sf(data = bu, fill = NA, color = "black", size = 1)
# crop and mask landscapes ------------------------------------------------
# select buffers
bu01 <- dplyr::filter(bu, id == 1)
bu01
ggplot(data = bu01) + geom_sf() + theme_bw()
bu02 <- dplyr::filter(bu, id == 2)
bu02
ggplot(data = bu02) + geom_sf() + theme_bw()
# crop and mask landscapes
la01 <- rc_raster %>%
raster::crop(bu01) %>%
raster::mask(bu01)
la01
la01 %>% plot
la01
landscapetools::show_landscape(la01, discrete = TRUE) +
geom_sf(data = bu01, fill = NA)
la02 <- rc_raster %>%
raster::crop(bu02) %>%
raster::mask(bu02)
la02
landscapetools::show_landscape(la02, discrete = TRUE) +
geom_sf(data = bu01, fill = NA)
landscapetools::show_landscape(la02, discrete = TRUE) +
geom_sf(data = bu02, fill = NA)
# check rasters -----------------------------------------------------------
landscapemetrics::check_landscape(la01)
landscapemetrics::check_landscape(la02)
# list metrics ------------------------------------------------------------
# all
all_metrics <- landscapemetrics::list_lsm()
all_metrics
# patch metrics
patch_metrics <- landscapemetrics::list_lsm() %>%
dplyr::filter(level == "patch") %>%
dplyr::arrange(type)
patch_metrics
# class metrics
class_metrics <- landscapemetrics::list_lsm() %>%
dplyr::filter(level == "class") %>%
dplyr::arrange(type)
class_metrics
# landscape metrics
landscape_metrics <- landscapemetrics::list_lsm() %>%
dplyr::filter(level == "landscape") %>%
dplyr::arrange(type)
landscape_metrics
# export
dplyr::bind_rows(patch_metrics, class_metrics, landscape_metrics) %>%
readr::write_csv("all_metrics.csv")
# metrics -----------------------------------------------------------------
# area in patch level
area_p <- landscapemetrics::lsm_p_area(la01)
area_p
# area in class level
area_c <- landscapemetrics::lsm_c_ca(la01)
area_c
# area in patch level
area_l <- landscapemetrics::lsm_l_ta(la01)
area_l
# verify
area_p %>%
dplyr::group_by(class) %>%
dplyr::summarise(area = sum(value))
area_c
area_p %>%
dplyr::group_by(layer) %>%
dplyr::summarise(area = sum(value))
area_l
# calculate all metrics on patch level
lsm_patch <- landscapemetrics::calculate_lsm(landscape = la01,
level = "patch",
edge_depth = 1,
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_patch
lsm_patch$metric %>% unique
lsm_class <- landscapemetrics::calculate_lsm(ladscape = la01,
level = "class",
edge_depth = 1,
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_class <- landscapemetrics::calculate_lsm(landscape = la01,
level = "class",
edge_depth = 1,
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_class
lsm_class$metric %>% unique
lsm_landscape <- landscapemetrics::calculate_lsm(ladnscape = la01,
level = "landscape",
edge_depth = 1,
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_landscape <- landscapemetrics::calculate_lsm(landscape = la01,
level = "landscape",
edge_depth = 1,
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_landscape
lsm_landscape$metric %>% unique
# maps --------------------------------------------------------------------
# plot landscape + landscape with labeled patches
landscapemetrics::show_patches(la01, class = 4, labels = FALSE)
landscapemetrics::show_cores(la01, class = 4, labels = FALSE)
landscapemetrics::show_lsm(la01, what = "lsm_p_area", class = 4, label_lsm = TRUE, labels = FALSE) +
theme(legend.position = "none")
# spatialize landscape metric values --------------------------------------
lsm_p_area_raster <- landscapemetrics::spatialize_lsm(la01$layer, what = "lsm_p_area", progress = TRUE)
lsm_p_area_raster
landscapetools::show_landscape(lsm_p_area_raster[[1]]$lsm_p_area)
# preparate r -------------------------------------------------------------
# memory
rm(list = ls())
# packages
library(fasterize)
library(landscapemetrics)
library(landscapetools)
library(raster)
library(rgdal)
library(sf)
library(tidyverse)
# directory
setwd("./")
getwd()
dir()
# import data -------------------------------------------------------------
# import
rc <- sf::read_sf("./02_dados/vector/rio_claro/SP_3543907_USO.shp")
ggplot() +
geom_sf(data = rc, aes(fill = CLASSE_USO), color = NA) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
labs(x = "Longitude", y = "Latitude", fill = "Classes") +
theme_bw()
# create number coloumn
rc <- rc %>%
dplyr::mutate(class = seq(5))
sf::st_drop_geometry(rc)
rc
rc
sf::st_drop_geometry(rc)
# rasterize ---------------------------------------------------------------
# create raster
ra <- fasterize::raster(rc, res = 30)
ra
# rasterize
rc_raster <- fasterize::fasterize(sf = rc, raster = ra, field = "class")
rc_raster
# plot
fasterize::plot(rc_raster)
# ggplot
ggplot() +
geom_raster(data = raster::rasterToPoints(rc_raster) %>% tibble::as_tibble(),
aes(x, y, fill = factor(layer))) +
scale_fill_manual(values = c("blue", "orange", "gray", "forestgreen", "green")) +
labs(x = "Longitude", y = "Latitude", fill = "Classes") +
theme_bw()
# landscapetools
landscapetools::show_landscape(rc_raster, discrete = TRUE)
# buffers -----------------------------------------------------------------
po <- sf::read_sf("./02_dados/vector/rio_claro/pontos_amostragem.shp")
po
bu <- sf::st_buffer(po, 2000)
bu
po
bu <- sf::st_buffer(po, 2000)
bu
landscapetools::show_landscape(rc_raster, discrete = TRUE) +
geom_sf(data = bu, fill = NA, color = "black", size = 1)
tm_shape(rc_raster) +
tm_raster() +
tm_shape(bu) +
tm_borders()
library(tmap)
tm_shape(rc_raster) +
tm_raster() +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "BlRd") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "BlRy") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "BlRe") +
tm_shape(bu) +
tm_borders()
tmaptools::palette_explorer()
tm_shape(rc_raster) +
tm_raster(palette = "Dark2") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "Dark2") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "Dark2", style = "fixed")) +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "Dark2", style = "fixed") +
tm_shape(bu) +
tm_borders()
tmaptools::palette_explorer()
tm_shape(rc_raster) +
tm_raster(palette = "BrBG") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "cat") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palettes = "cat") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "BrBG", col = "cat") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(col = "cat") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(col = "cat", palette = "cat") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "BrBG", n = 5) +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "BrBG", style = "cat") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "cat", style = "cat") +
tm_shape(bu) +
tm_borders()
tm_shape(rc_raster) +
tm_raster(palette = "cat", style = "cat") +
tm_shape(bu) +
tm_borders() +
tm_graticules()
tm_shape(rc_raster) +
tm_raster(palette = "cat", style = "cat") +
tm_shape(bu) +
tm_borders() +
tm_grid()
tm_shape(rc_raster) +
tm_raster(palette = "cat", style = "cat") +
tm_shape(bu) +
tm_borders() +
tm_graticules()
# crop and mask landscapes ------------------------------------------------
# select buffers
bu01 <- dplyr::filter(bu, id == 1)
bu01
ggplot(data = bu01) + geom_sf() + theme_bw()
bu02 <- dplyr::filter(bu, id == 2)
bu02
ggplot(data = bu02) + geom_sf() + theme_bw()
# crop and mask landscapes
la01 <- rc_raster %>%
raster::crop(bu01) %>%
raster::mask(bu01)
la01
landscapetools::show_landscape(la01, discrete = TRUE) +
geom_sf(data = bu01, fill = NA)
la02 <- rc_raster %>%
raster::crop(bu02) %>%
raster::mask(bu02)
la02
landscapetools::show_landscape(la02, discrete = TRUE) +
geom_sf(data = bu02, fill = NA)
# list metrics ------------------------------------------------------------
# all
all_metrics <- landscapemetrics::list_lsm()
all_metrics
readr::write_csv(all_metrics, "all_metrics.csv")
# check rasters -----------------------------------------------------------
landscapemetrics::check_landscape(la01)
landscapemetrics::check_landscape(la02)
# metrics -----------------------------------------------------------------
# area in patch level
area_p <- landscapemetrics::lsm_p_area(la01)
area_p
# area in class level
area_c <- landscapemetrics::lsm_c_ca(la01)
area_c
# area in patch level
area_l <- landscapemetrics::lsm_l_ta(la01)
area_l
# verify
area_p %>%
dplyr::group_by(class) %>%
dplyr::summarise(area = sum(value))
area_c
area_p %>%
dplyr::group_by(layer) %>%
dplyr::summarise(area = sum(value))
area_l
# calculate all metrics on patch level
lsm_patch <- landscapemetrics::calculate_lsm(landscape = la01,
level = "patch",
edge_depth = 1,
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_patch
lsm_patch$metric %>% unique
lsm_class <- landscapemetrics::calculate_lsm(landscape = la01,
level = "class",
edge_depth = 1,
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_class
lsm_class$metric %>% unique
lsm_landscape <- landscapemetrics::calculate_lsm(landscape = la01,
level = "landscape",
edge_depth = 1,
full_name = TRUE,
verbose = TRUE,
progress = TRUE)
lsm_landscape
lsm_landscape$metric %>% unique
# maps --------------------------------------------------------------------
# plot landscape + landscape with labeled patches
landscapemetrics::show_patches(la01, class = 4, labels = FALSE)
landscapemetrics::show_cores(la01, class = 4, labels = FALSE)
landscapemetrics::show_lsm(la01, what = "lsm_p_area", class = 4, label_lsm = TRUE, labels = FALSE) +
theme(legend.position = "none")
# spatialize landscape metric values --------------------------------------
lsm_p_area_raster <- landscapemetrics::spatialize_lsm(la01$layer, what = "lsm_p_area", progress = TRUE)
lsm_p_area_raster
landscapetools::show_landscape(lsm_p_area_raster[[1]]$lsm_p_area)
500/30
500/6
